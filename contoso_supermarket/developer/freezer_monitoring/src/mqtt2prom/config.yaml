mqtt:
  # The MQTT broker to connect to
  server: tcp://sensor-monitor-broker.sensor-monitor.svc.cluster.local:1883
  # server: tcp://localhost:1883
  # Optional: Username and Password for authenticating with the MQTT Server
  # user: sensor123
  # password: sensor123

  # Optional: Used to specify ClientID. The default is <hostname>-<pid>
  # client_id: somedevice
  # The Topic path to subscribe to. Be aware that you have to specify the wildcard.
  topic_path: +/environmentSensor
  # topic_path: testcj2/devices/chi/+

  # Optional: Regular expression to extract the device ID from the topic path. The default regular expression, assumes
  # that the last "element" of the topic_path is the device id.
  # The regular expression must contain a named capture group with the name deviceid
  # For example the expression for tasamota based sensors is "tele/(?P<deviceid>.*)/.*"
  # device_id_regex: "(.*/)?(?P<deviceid>.*)"
  # for deviceid=freezer1
  device_id_regex: "(?P<deviceid>.*)/.*"
  # for deviceid=environmentSensor
  # device_id_regex: "(.*/)?(?P<deviceid>.*)?"

  # The MQTT QoS level
  qos: 1
cache:
  # Timeout. Each received metric will be presented for this time if no update is send via MQTT.
  # Set the timeout to -1 to disable the deletion of metrics from the cache. The exporter presents the ingest timestamp
  # to prometheus.
  timeout: 24h
json_parsing:
  # Separator. Used to split path to elements when accessing json fields.
  # You can access json fields with dots in it. F.E. {"key.name": {"nested": "value"}}
  # Just set separator to -> and use key.name->nested as mqtt_name
  separator: .
# This is a list of valid metrics. Only metrics listed here will be exported
metrics:
  # The name of the metric in prometheus
  - prom_name: temperature
    # The name of the metric in a MQTT JSON message
    mqtt_name: Temperature(F)
    # The prometheus help text for this metric
    help: Freezer temperature reading
    # The prometheus type for this metric. Valid values are: "gauge" and "counter"
    type: gauge
    # A map of string to string for constant labels. This labels will be attached to every prometheus metric
    const_labels:
      sensor_type: freezer
    # The name of the metric in prometheus
  - prom_name: humidity
    # The name of the metric in a MQTT JSON message
    mqtt_name: Humidity(%)
    # The prometheus help text for this metric
    help: Freezer humidity reading
    # The prometheus type for this metric. Valid values are: "gauge" and "counter"
    type: gauge
    # A map of string to string for constant labels. This labels will be attached to every prometheus metric
    const_labels:
      sensor_type: freezer
